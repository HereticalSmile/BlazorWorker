@page "/"
@inject IWorkerFactory workerFactory

@using BlazorWorker.BackgroundServiceFactory
@using BlazorWorker.Demo.Shared
@using BlazorWorker.Core
    <div class="row">
        <div class="col-5">
            <h1>.NET Worker Threads</h1>

            Welcome to your new multithreaded app.

            <br /><br />
            Pi estimation demo. Specify number of iterations.<br />
            <input type="text" @bind="piIterations" placeholder="estimation iterations" /><br />
            <button @onclick="OnClick">Estimate pi</button><br />
            <button disabled="@canDisposeService" @onclick="OnDisposeService">Dispose Service</button><br />
            <button disabled="@canDisposeWorker" @onclick="OnDisposeWorker">Dispose Worker</button><br />
            <progress max="@piIterations" value="@piProgress" />
            <br />
            <br />
            Output:
            <br />
<pre>
@output
</pre>
        </div>
        <div class="col-7">
            <GithubSource RelativePath="Pages/Index.razor" />
        </div>
        </div>
        @code {
            int piIterations = 5_000_000;
            int piProgress = 0;
            string output;
            IWorker worker;
            BlazorWorker.WorkerBackgroundService.IWorkerBackgroundService<MathsService> backgroundService;
            string canDisposeWorker => worker == null ? null : "disabled";
            string canDisposeService => backgroundService == null ? null : "disabled";


            public async Task OnClick(EventArgs _)
            {
                output = "";
                var rn = Environment.NewLine;
                try
                {

                    if (worker == null)
                    {
                        worker = await workerFactory.CreateAsync();
                    }

                    var sw = new System.Diagnostics.Stopwatch();
                    if (backgroundService == null)
                    {
                        output = $"{rn}{LogDate()} Creating background service...";
                        StateHasChanged();

                        sw.Start();
                        backgroundService = await worker.CreateBackgroundServiceAsync<MathsService>();

                        await backgroundService.RegisterEventListenerAsync(nameof(MathsService.Pi),
                                (object s, int pinum) =>
                                {
                                    piProgress = pinum;
                                    StateHasChanged();
                                });
                        sw.Stop();
                        output += $"{rn}{LogDate()} Background service created in {sw.ElapsedMilliseconds}ms";
                        StateHasChanged();
                    }

                    // We cannot pass piIterations directly, as it would create a reference to the current class
                    // which is difficult to serialize over process borders
                    // local variables are fine though
                    var localParamValue = piIterations;

                    output += $"{rn}{LogDate()} Calling EstimatePI({piIterations})...";
                    var __ = backgroundService.RunAsync(s => s.EstimatePI(localParamValue)).ContinueWith(t =>
                    {
                        output += $"{rn}{LogDate()} EstimatePI({piIterations}) = {t.Result}";
                        StateHasChanged();
                    });
                }
                catch (Exception e)
                {
                    output = $"{rn}Error = {e}";
                }
            }

            public async Task OnDisposeService()
            {
                await backgroundService.DisposeAsync();
                backgroundService = null;
            }

            public async Task OnDisposeWorker()
            {
                await worker.DisposeAsync();
                worker = null;
                backgroundService = null;
            }

            private string LogDate()
            {
                return DateTime.Now.ToString("HH:mm:ss:fff");
            }
        }
